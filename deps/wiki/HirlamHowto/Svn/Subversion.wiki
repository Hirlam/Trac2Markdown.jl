[[PageOutline]]

[[Center(begin)]]
== '''Hirlam HOWTOs''' ==
= Subversion Revision Control =
[[Center(end)]]

== What is Subversion? ==
''excerpt from the'' [http://svnbook.red-bean.com/nightly/en/index.html Reference handbook] [[br]]
Subversion is a free/open-source version control system. That is, Subversion manages files and directories over time. A tree of files is placed into a central repository. The repository is much like an ordinary file server, except that it remembers every change ever made to your files and directories. This allows you to recover older versions of your data, or examine the history of how your data changed. In this regard, many people think of a version control system as a sort of “time machine”.

Subversion can access its repository across networks, which allows it to be used by people on different computers. At some level, the ability for various people to modify and manage the same set of data from their respective locations fosters collaboration. Progress can occur more quickly without a single conduit through which all modifications must occur. And because the work is versioned, you need not fear that quality is the trade-off for losing that conduit—if some incorrect change is made to the data, just undo that change.

Some version control systems are also software configuration management (SCM) systems. These systems are specifically tailored to manage trees of source code, and have many features that are specific to software development—such as natively understanding programming languages, or supplying tools for building software. Subversion, however, is not one of these systems. It is a general system that can be used to manage any collection of files. For you, those files might be source code—for others, anything from grocery shopping lists to digital video mixdowns and beyond.

Reference links:
[http://svnbook.red-bean.com/nightly/en/index.html SVN Handbook]
== What are the main features of the Subversion? ==
''excerpt from the'' [http://svnbook.red-bean.com/nightly/en/index.html Reference handbook] [[br]]

When discussing the features that Subversion brings to the version control table, it is often helpful to speak of them in terms of how they improve upon CVS's design. If you're not familiar with CVS, you may not understand all of these features. And if you're not familiar with version control at all, your eyes may glaze over unless you first read [http://svnbook.red-bean.com/nightly/en/svn.basic.html Basic Concepts], in which a gentle introduction to version control in general is provided.

Subversion provides:

 * Directory versioning

    CVS only tracks the history of individual files, but Subversion implements a “virtual” versioned filesystem that tracks changes to whole directory trees over time. Files and directories are versioned.
 * True version history

    Since CVS is limited to file versioning, operations such as copies and renames—which might happen to files, but which are really changes to the contents of some containing directory—aren't supported in CVS. Additionally, in CVS you cannot replace a versioned file with some new thing of the same name without the new item inheriting the history of the old—perhaps completely unrelated—file. With Subversion, you can add, delete, copy, and rename both files and directories. And every newly added file begins with a fresh, clean history all its own.
 * Atomic commits

    A collection of modifications either goes into the repository completely, or not at all. This allows developers to construct and commit changes as logical chunks, and prevents problems that can occur when only a portion of a set of changes is successfully sent to the repository.

 * Versioned metadata

    Each file and directory has a set of properties—keys and their values—associated with it. You can create and store any arbitrary key/value pairs you wish. Properties are versioned over time, just like file contents.

 * Choice of network layers

    Subversion has an abstracted notion of repository access, making it easy for people to implement new network mechanisms. Subversion can plug into the Apache HTTP Server as an extension module. This gives Subversion a big advantage in stability and interoperability, and instant access to existing features provided by that server—authentication, authorization, wire compression, and so on. A more lightweight, standalone Subversion server process is also available. This server speaks a custom protocol which can be easily tunneled over SSH.

 * Consistent data handling

    Subversion expresses file differences using a binary differencing algorithm, which works identically on both text (human-readable) and binary (human-unreadable) files. Both types of files are stored equally compressed in the repository, and differences are transmitted in both directions across the network.
Efficient branching and tagging

    The cost of branching and tagging need not be proportional to the project size. Subversion creates branches and tags by simply copying the project, using a mechanism similar to a hard-link. Thus these operations take only a very small, constant amount of time. 
Hackability

    Subversion has no historical baggage; it is implemented as a collection of shared C libraries with well-defined APIs. This makes Subversion extremely maintainable and usable by other applications and languages.


[[PageOutline]]

== What are the basic Subversion commands ==
''You are adviced to look at the reference link for '' [http://svnbook.red-bean.com/nightly/en/svn.ref.html svn basic commands] directly.

The Subversion command-line client: svn
{{{
usage: svn <subcommand> [options] [args]

Available subcommands:
   add
   blame (praise, annotate, ann)
   cat
   changelist (cl)
   checkout (co)
   cleanup
   commit (ci)
   copy (cp)
   delete (del, remove, rm)
   diff (di)
   export
   help (?, h)
   import
   info
   list (ls)
   lock
   log
   merge
   mergeinfo
   mkdir
   move (mv, rename, ren)
   propdel (pdel, pd)
   propedit (pedit, pe)
   propget (pget, pg)
   proplist (plist, pl)
   propset (pset, ps)
   resolve
   resolved
   revert
   status (stat, st)
   switch (sw)
   unlock
   update (up)
}}}

[[PageOutline]]

== How to install Subversion Client ==

On most Linux systems, the easiest way to install Subversion is using the standard package manager. You only need to compile Subversion
yourself if you need a newer version than your distribution provides. For example, you need version 1.5 to use the merge tracking
feature.

''excerpt from the'' [http://svnbook.red-bean.com/nightly/en/index.html Reference handbook] [[br]]
Subversion is built on a portability layer called APR—the Apache Portable Runtime library. The APR library provides all the interfaces that Subversion needs to function on different operating systems: disk access, network access, memory management, and so on. While Subversion is able to use Apache as one of its network server programs, its dependence on APR does not mean that Apache is a required component. APR is a standalone library useable by any application. It does mean, however, that like Apache, Subversion clients and servers run on any operating system that the Apache httpd server runs on: Windows, Linux, all flavors of BSD, Mac OS X, Netware, and others.

The easiest way to get Subversion is to download a binary package built for your operating system. Subversion's website (http://subversion.tigris.org) often has these packages available for download, posted by volunteers. The site usually contains graphical installer packages for users of Microsoft operating systems. If you run a Unix-like operating system, you can use your system's native package distribution system (RPMs, DEBs, the ports tree, etc.) to get Subversion.

Alternately, you can build Subversion directly from source code. From the Subversion website, download the latest source-code release. After unpacking it, follow the instructions in the INSTALL file to build it. Note that a released source package contains everything you need to build a command-line client capable of talking to a remote repository (in particular, the apr, apr-util, and neon libraries). But optional portions of Subversion have many other dependencies, such as Berkeley DB and possibly Apache httpd. If you want to do a complete build, make sure you have all of the packages documented in the INSTALL file. If you plan to work on Subversion itself, you can use your client program to grab the latest, bleeding-edge source code. This is documented in the section called “Get the Source Code”.

== How to build a sandbox of a certain HIRLAM release version? ==
Assume that you have a svn client available in your platform, you may
 1. At ECMWF you need to configure a http proxy in the file ~/.subversion/servers. On ECGATE, you can do
{{{
   cp ~nhz/.subversion/servers ~/.subversion/servers
}}}

 1. create a true svn sandbox, allowing all svn commands (such as "svn diff", "svn switch",etc. by performing
{{{
   svn co https://svn.hirlam.org/tags/HIRLAM5_1_4           # 5.1.4
   svn co https://svn.hirlam.org/tags/HIRLAM6_4_4           # 6.4.4
   svn co https://svn.hirlam.org/tags/hirlam-7.0rc1         # 7.0rc1
   svn co https://svn.hirlam.org/tags/hirlam-7.0            # 7.0
   svn co https://svn.hirlam.org/trunk         # HEAD version of the repository (latest, unreleased update)
}}}
 1. or, create a source-only copy of a certain release, with no possibility to use svn commands, by replacing co with export in the above
{{{
   svn export https://svn.hirlam.org/tags/HIRLAM5_1_4           # 5.1.4
   svn export https://svn.hirlam.org/tags/HIRLAM6_4_4           # 6.4.4
   svn export https://svn.hirlam.org/tags/hirlam-7.0rc1         # 7.0rc1
   svn export https://svn.hirlam.org/tags/hirlam-7.0            # 7.0
   svn export https://svn.hirlam.org/trunk  # HEAD version of the repository (latest, unreleased update)
}}}

if you have a local tarball of the svnroot, (available on ecgate at /scratch/ms/dk/nhz/svnroot.tar.gz), you can untar it and replace the above address https://svn.hirlam.org with something like file:///home/ms/dk/nhz/svnroot instead, e.g, on ECGATE,
{{{
   svn export file:///home/ms/dk/nhz/svnroot/tags/hirlam-7.0            # 7.0
   svn export file:///home/ms/dk/nhz/svnroot/trunk  # HEAD version of the repository (latest, unreleased update)
}}}


== Who changed/created this line of code? Who should I contact? ==
{{{
 svn blame semla2t.F  
 svn annotate semla2t.F
}}}

== How do one merge relevant updates from the HIRLAM repository with one's own local updates?  ==
The following example demonstrate how one merges code changes featured in the HIRLAM repository with ones own sandbox, originated from a certain code version, e.g., trunk:
 1. local updates on trunk
{{{
 svn co https://svn.hirlam.org/trunk/hirlam; cd trunk                     # create local sandbox for trunk branch
 vi phys/phys.F; vi scripts/FCinput;...                                   # make local changes 
}}}
 2.  (after some days,...), merge with newer version of trunk
{{{
 svn update                                                               # update to the latest trunk version
 vi scripts/FCinput;...                                                   # assume conflict between local and latest repository versions
 svn resolved scripts/FCinput                                             # adopt merged code which solve the conflict
}}}
 3. (after some days...) merge with other code update 
{{{
 svn update   
 svn merge -r 5178:5180 https://svn.hirlam.org/branches/intercomp         # adopt changeset [5179] and [5180] from branch intercomp
 vi phys/phys.F                                                           # find and resolve conflict between local and latest repository
 svn resolved phys/phys.F                                                 # adopt merged code which solve the conflict
}}}
 4. (after some days...) update to the latest trunk 
{{{
 svn update                                                               # update to the latest trunk version
}}}


== Miscellaneous stuff   ==

Apart from the command line svn, one can also use tools such as rapidsvn GUI client (http://rapidsvn.tigris.org) combined with extremely powerful diff & merge tools such as meld (http://meldmerge.org) (available on most today's Linux platforms).
If used properly, they can make your work much easier especially when working with large portions of the code.

[[SubWiki]]

[[Center(begin)]]
[https://hirlam.org/trac/wiki/HirlamHowto Back to the main page of the HIRLAM-HOWTO]
[[Center(end)]]
----
[[Center(begin)]]
[[Disclaimer]]

[[Color(red, Last modified on)]] [[LastModified]]
[[Center(end)]]