[[PageOutline]]

[[Center(begin)]]
== '''Hirlam HOWTOs''' ==
= '''Running HIRLAM on LinuxPC''' =
[[Center(end)]]


== What do I need as a mimimum to run HIRLAM on a Linux PC? ==
 * Revision control tools
   * For version 6.4.4 or earlier releases, a CVS package
   * For version 7.0beta1, a Subversion client
   * For version 7.0rc1 (April 18 2006) or later releases, the Subversion client is optional
 * Access to the HIRLAM source
   * via internet and assuming availability of Subversion client: https://svn.hirlam.org: Access control is enforced if accessing outside of headquarters of the HIRLAM member services and ECMWF platform;
   * via local copy of the repository
   * via a HIRLAM release tarball, for releases after 7.0rc1 (April 18, 2006)
 * Compilers, tools
   * Compiler for F77/F90, C
   * Perl, Shell
   * Perl toolkit (not mandatory, for mini_SMS GUI)
   * HDF 4.0 (mandatory for climate generation)
 * Data that is not included in the HIRLAM source code repository
   * Sample observation data for conventional data (bufr-format); satellite data (atovs etc.)
   * Sample ECMWF lateral boundary data including SST information in GRIB format
   * [https://hirlam.org/trac/wiki/HirlamHowto/Install/General#WhatisanHDFSETandwherecanIfindtheHDFsets HDF files for physiographic data]
 
== How to build !GnuFortran compiler? ==
If you use open source !GnuFortran compiler, it is not recommended to use gfortran versions earlier than 4.1. As of July 24, 2006, version 4.2 is the newest version of !GNUFortran. You can do following to build it on your platform
 * check that various tools and packages are available in the local platform for building GCC (GNU Compiler Collection). Modifying GCC sources requires additional tools described in http://gcc.gnu.org/install/prerequisites.html.  Not all the packages listed there are required for gnufortran compiler, and it is likely that most of the packages (see the lists below) are already included in the standard Linux system packages, but some of them may be quite new:
   * ISO C90 compiler
   * GNAT
   * A “working” POSIX compatible shell, or GNU bash
   * GNU binutils
   * gzip version 1.2.4 (or later) or
   * bzip2 version 1.0.2 (or later)
   * GNU make version 3.79.1 (or later)
   * GNU tar version 1.14 (or later)
   * GNU Multiple Precision Library (GMP) version 4.0 (or later)
   * MPFR Library
   * autoconf versions 2.13 and 2.59
   * GNU m4 version 1.4 (or later)
   * automake versions 1.9.3
   * gettext version 0.14.5 (or later)
   * gperf version 2.7.2 (or later)
   * dejagnu version 1.4.4 (or later)
   * autogen version 5.5.4 (or later)
   * guile version 1.4.1 (or later)
   * GNU Bison version 1.28 (or later)
   * Flex version 2.5.4 (or later)
   * Texinfo version 4.4 (or later)
   * TeX (any working version)
   * cvs version 1.10 (or later)
   * ssh (any version)
   * perl version 5.6.1 (or later)
   * GNU diffutils version 2.7 (or later)
   * patch version 2.5.4 (or later)
 * Download the latest snapshot of !GNUFortran-4.2 (e.g. gcc-4.2-20060722.tar.bz2) from ftp://ftp.nluug.nl/mirror/languages/gcc/snapshots/LATEST-4.2/index.html. 

 * Unzip and untar, which will make a directory gcc-4.2-20060722):
{{{
tar jxf gcc-4.2-20060722.tar.bz2
}}}

 * build, assuming root privilege:
{{{
  mkdir obj
  cd obj
  ../gcc-4.2-20060722/configure --enable-languages=fortran
  make bootstrap
  su root
  <root-password>
  make install
}}}
This will install the compiler in /usr/local/ with bin,lib,man directories (obviously, using a manually installed snapshot is only necessary until your Linux distribution includes gcc/gfortran 4.1 or newer as the default compiler). 

 * after local installation of shared library under /usr/local/lib, you may need to update the ld.so.cache of the dynamic library loader ld.so by e.g.,
{{{
ldconfig /usr/local/lib
}}}

If /usr/local/bin is in your PATH, you can now use the compiler as an ordinary user.

== How to install HIRLAM system after 7.0rc1 release (April 18 2006), assuming internet access and Subversion client? ==
 1. set up a local HIRLAM source code directory
{{{
   mkdir $srcpath
   cd $srcpath
}}}
 1. download the HIRLAM source
{{{
   svn co https://svn.hirlam.org/tags/hirlam-7.0rc1 # for 7.0rc1 release
   mv hirlam-7.0rc1 7.0rc1                          # mv directory to make "Hirlam -r 7.0rc1" work
   svn co https://svn.hirlam.org/trunk              # for HEAD version
}}}
 1. optionally, link the check-out version to 'current' directory as default:
{{{
   ln -s 7.0rc1  current         # for 7.0rc1 release
   ln -s trunk current           # for HEAD version
}}}
== How to install HIRLAM system after 7.0rc1 release (April 18 2006), assuming local copy of svnroot and Subversion client? ==
 1. set up a local HIRLAM source code directory
{{{
   mkdir $srcpath
   cd $srcpath
}}}
 1. extract the HIRLAM source, assuming extracted repository in $svnrootpath
{{{
   svn co file://$svnrootpath/svnroot/tags/hirlam-7.0rc1   # for 7.0rc1 release
   mv hirlam-7.0rc1 7.0rc1                                 # mv directory to make "Hirlam -r 7.0rc1" work
   svn co file://$svnrootpath/svnroot/trunk                # for HEAD version
}}}
 1. optionally, link the check-out version to 'current' directory as default:
{{{
   ln -s 7.0rc1  current                # use 7.0rc1 release as default
   ln -s trunk current                  # use HEAD version
}}}
== How to install HIRLAM system after 7.0rc1 release (April 18 2006), with a HIRLAM source code tarball? ==
 * set up a local HIRLAM source code directory
{{{
   mkdir $srcpath
   cd $srcpath
}}}
 * extract the HIRLAM source, with a source code tarball
{{{
   tar -zxvf hirlam-7.0rc1.tar.gz # for 7.0rc1
   mv hirlam-7.0rc1 7.0rc1        #  mv directory to make "Hirlam -r 7.0rc1" work 
   tar -zxvf head.tar.gz          # for HEAD version
}}}
 * optionally, link the check-out version to 'current' directory as default:
{{{
   ln -s 7.0rc1  current         # use 7.0rc1 release as default
   ln -s trunk current           # use HEAD version as default
}}}
== How to configure a HIRLAM experiment and run? ==
 * link the top-level Hirlam script. let $VERSION be 7.0rc1 or HEAD or current,
{{{
   alias Hirlam $srcpath/$VERSION/hirlam/config-sh/Hirlam
}}}
 * set up a local experiment directory
{{{
   mkdir -p $HOME/hl_home/$expdir
   cd $HOME/hl_home/$expdir
}}}
 * set up local configuration
{{{
   Hirlam setup -d $srcpath -h LinuxPC            # use the version under $srcpath/current
   Hirlam setup -d $srcpath -r 7.0rc1 -h LinuxPC  # use 7.0rc1 under $srcpath/7.0rc1
   Hirlam setup -d $srcpath -r trunk -h LinuxPC   # use the HEAD version under $srcpath/trunk
}}}
 * edit script config-sh/config.LinuxPC to correct data links etc. 
 * 'check out' some key scripts to modify experiment configuration, such as
{{{
   Hirlam co config/config.linuxgfortran
   Hirlam co scripts/Env_expdesc
   Hirlam co scripts/Env_input
   Hirlam co scripts/Env_domain 
   Hirlam co scripts/VARinput 
}}} 
 * Note that you probably cannot run the default domain on your local platform because of limited memory resources. A possible test domain that can be specified in `Env_domain` is e.g. T50: 
{{{ 
   NLON=50              # areasize 
   NLAT=50 
   NLEV=40 
   NBNDRY=4             # width of boundary zone 
   NPBPTS=0 
   SOUTH=-29.           # area boundaries 
   WEST=-27. 
   NORTH=26.125 
   EAST=28.125 
   POLAT=-30.0          # coordinates of South pole 
   POLON=0.0 
}}} 
    * In order to run 3DVar, you may need to adapt some problemsize settings. In `VARinput` include
the following settings within the `cat >problemsize.dat <<EOF` construct: 
{{{ 
   len_loops=${LEN_LOOPS-2047}, 
   nobsh_hi=${NOBSH_HI-2000}, 
   max_obsbuf=${MAX_OBSBUF-2000000} 
}}} 
    and in `Env_expdesc` set: 
{{{ 
   # Specific hirvda settings for LinuxPC platforms 
   PCMALEN=20000000 
   NOBSH_LOCAL=45000 
   NOBSH_HI=180000 
   NOBSH_SUB=2000 
   LEN_LOOPS=4 
}}} 
    * In order to access input data, change Env_input and specifiy following input data locations: 
      * observations: two possibilities 
        1. adapt OBDIR and OBEXP to p specifiy Observation data that was used in experiment OBEXP 
        1. adapt MARS to the path were the observation data (e.g. ob* files) are 
      * boundary data: two possibilities 
        1. set INBDDIR=$HL_ARC/$INBDEXP in order to use the simulation of experiment INBDEXP as boundaries 
        1. set INBDDIR to the path where the *.mars files are 
      * set MARSLSM to the file with the ECMWF land-sea mask data (lsm* file), if you use *.mars files as boundaries 
    * It may also be necessary on you local LinuxPC platform to build Hirlam with the system-wide libraries [[Color(green, fftw3)]], [[Color(green, blas)]] and [[Color(green, lapack)]]. If you have these libraries installed on your system, then it is highly recommend that you make use of these. It has been reported that use of Hirlam's internal libs for lappack and blas make HIRVDA hang. You can make the libraries known to Hirlam build system as follows: 
{{{ 
   Hirlam co config/config.linuxgfortran 
}}} 
   and edit as follows: 
{{{ 
   FFT := -DFFTW3 
   LDFLAGS := -g -lg2c -lfftw3 -llapack -lblas 
   MACHINECPP :=  ... -DHAS_BLAS -DHAS_LAPACK ... 
}}} 
 * launch experiment, e.g.,
{{{
   Hirlam start DTG=2006030806 DTGEND=2006030812 LLMAIN=12
}}}

[[SubWiki]]

[[Center(begin)]]
[https://hirlam.org/trac/wiki/HirlamHowto Back to the main page of the HIRLAM-HOWTO]
[[Center(end)]]
----
[[Center(begin)]]
[[Disclaimer]]

[[Color(red, Last modified on)]] [[LastModified]]
[[Center(end)]]