== ECMWF 137 level boundary data ==
According to ECMWF, the new cycle (38r2) that will enter production on Tuesday the 25th of June 2013 will contain 137 levels.  The [http://www.ecmwf.int/products/changes/ifs_cycle_38r2 latest information] from ECMWF is summarised here:
 * New vertical level definintion on the 25th of June 2013
 * Increase to 137 vertical levels
 * At least 3 monthsâ€™ notice of implementation date will be given
 * A web page is being prepared
 * Technical test data will be made available soon
 * Near real time dissemination will be available from mid April 2013. 

This has consequences for HIRLAM and HARMONIE operational runs that are outlined below.
=== ECMWF Test Data Set ===
ECMWF has provided a test data set with the following location in MARS:
 * CLASS=rd
 * EXPVER=fj79
 * STREAM=oper
and - don't forget:
 * LEVELIST="1/to/137"
for the dates 20100701 - 20100731.
This [http://www.ecmwf.int/services/archive/d/catalog/class=rd/expver=fj79/ webpage at ECMWF] contains more information about the data available.
=== HIRLAM ===
The following versions of HIRLAM have been tested with 137 level boundary data and found to work correctly:
 * trunk as of revision [10979] - test run at ECMWF in ECFS (tmp): ectmp:/nkc/hirlam/137.
 * hirlam-7.4 branch as of revision [10984].
 * hirlam-7.3 branch as of revision [10980] - test run at ECMWF in ECFS (tmp): ectmp:/nkc/hirlam/137H73.
=== HIRLAM: If you cannot update your operations to one of the versions above ===
If you cannot upgrade your operational HIRLAM system(s) to one of the versions above, you need to undertake the following steps to be able to process 137-level ECMWF boundary data.

Make a standalone version of gribconv.x

 * Create a new binary gribconv.x based on the code in the hirlam-7.4 branch
   - Get the source code:
{{{
   svn co https://svn.hirlam.org/branches/hirlam-7.4
   tar --exclude-vcs -zcvf hirlam-7.4.tgz hirlam-7.4
}}}
   - Place it on the operational machine, and untar it:
{{{
   tar zxvf hirlam-7.4.tgz
}}}
   - Add (or modify) your local configuration file (for compilation) in src/config (config.<your-arch>).
     Note that it has to contain pointers to your local GRIB API library, e.g. like the following:
{{{
GRIB_API_LIB     = -L$(HOME)/grib_api/lib -lgrib_api_f90 -lgrib_api
GRIB_API_INCLUDE = -I$(HOME)/grib_api/include
ifneq ($(strip $(GRIB_API_INCLUDE)),)
GRIB_API         := -DHAS_GRIB_API
endif
}}}
   - Compile the code:
{{{
   cd hirlam-7.4/src
   make ARCH=<your-arch> gribconv.x
}}}
   - Copy the new gribconv.x (which resides in src/<your-arch>/bin) to a safe place, e.g., $HOME/bin
{{{
   cp <your-arch>/bin/gribconv.x $HOME/bin
}}}
 * Testing the new gribconv.x executable:
   - Take one (or all three) of the .mars files from ectmp:/nkc/hirlam/137/2010/07/02/18:
{{{
% els ectmp:/nkc/hirlam/137/2010/07/02/18
-ECFS=> ectmp:/nkc/hirlam/137/2010/07/02/18
...
-rw-r-----   1 nkc      hirlam      193426200 Oct  4 10:11 ma201007021800.mars
-rw-r-----   1 nkc      hirlam       40584600 Oct  4 10:11 mf201007021803.mars
-rw-r-----   1 nkc      hirlam       40584600 Oct  4 10:11 mf201007021806.mars
...
}}}
   - And run gribconv.x as follows:
{{{
$HOME/bin/gribconv.x -gb2gb1 ma201007021800.mars out
}}}
   The 'out' file should be an ASIMOF file with 126 levels (of the 137 in the original) of ECMWF data encoded in GRIB1 format (use the program diasim.x to view its contents).

Changes to your operational run:

 * Update the include file PARAEC.inc in the prpo library as follows:

   Change:
{{{
   PARAMETER (MLEVEC=100)
}}}
   to:
{{{
   PARAMETER (MLEVEC=150)
}}}
 * Adapt the script ExtractBDfromMARS to use this gribconv.x (note - the line numbers do not have to match in your specific case):
{{{
94,96c94,101
<    ln -s $in fort.1
<    ln -s $BD fort.2
<    Boot PGM=pgb2as || exit
---
>    if [ "${BDGRIB2-no}" = yes ]
>    then
>       $HOME/bin/gribconv.x -gb2gb1 $in $BD || exit
>    else
>       ln -s $in fort.1
>       ln -s $BD fort.2
>       Boot PGM=pgb2as || exit
>    fi
339,341c344,351
< ln -s $in fort.1
< ln -s $BD fort.2
< Boot PGM=pgb2as || exit
---
> if [ "${BDGRIB2-no}" = yes ]
> then
>    $HOME/bin/gribconv.x -gb2gb1 $in $BD || exit
> else
>    ln -s $in fort.1
>    ln -s $BD fort.2
>    Boot PGM=pgb2as || exit
> fi
}}}
 * Adapt the script Env_expdesc to indicate GRIB2 format boundary data (note - the line numbers do not have to match in your specific case):
{{{
77c78,79
< BDSTRATEGY=operational  # which boundary strategy to follow (see script MakeStrategy)
---
> BDGRIB2=yes       # Whether boundaries are in GRIB 2 format (yes|no)
> BDSTRATEGY=available  # which boundary strategy to follow (see script MakeStrategy)
203c205
<        IDFI ILRES INCMOD LSMIX MIXINT NOUTERLOOP OBSCUT
---
>        IDFI ILRES INCMOD LSMIX MIXINT NOUTERLOOP OBSCUT BDGRIB2
}}}
=== HARMONIE ===
The following versions of HARMONIE have been tested with 137 level boundary data and found to work correctly:
 * harmonie-36h1.4.bf1 tag (revision [10171]) - test run at ECMWF in ECFS (tmp): ectmp:/nkc/harmonie/137H3614.
 * trunk since that tag  - test run at ECMWF in ECFS (tmp): ectmp:/nkc/harmonie/137.
=== HARMONIE: If you cannot update your operations to one of the versions above ===
TBD - build a stand-alone gl_grib_api based on tag harmonie-36h1.4.bf1 ?
=== Fldextr ===
The current software for extraction verification data from model,fldextr in gl, does not handle GRIB2 data. In the preparatory branch [https://svn.hirlam.org/branches/gl_grib_api gl_grib_api] this is solved. A new namelist parameter {{{toplev}}} have been introduced. Setting {{{toplev=-1}}} allows fldextr to determine the number of levels needed to extract the given pressure levels and thus limit the amount of memory required.

=== Contact ===
Toon Moene (moene@knmi.nl and toon@moene.org)