[[PageOutline]]

'''MUSC using the develop branch (CY43) in the git repository'''

== Introduction ==
A revised MUSC environment is included with the Harmonie scripting system. A "reference" test, musc_ref, is available and idealized test cases are being developed. Instructions on how to use MUSC are included below.

== Set up MUSC ==

 1. Get the code:
{{{
mkdir -p $HOME/harmonie_releases/git
cd $HOME/harmonie_releases/git
git clone https://git.hirlam.org/Harmonie -b develop develop ## This just clones the develop branch
cd develop
git branch
# If you already have a clone of the code but want to update it to the latest, use "git pull" rather than "git branch".
}}}

 2. Set up a MUSC experiment. In this example the METIE.LinuxRH7gnu system config file is used
{{{
mkdir -p $HOME/hm_musc/test_0001
cd $HOME/hm_musc/test_0001
$HOME/harmonie_releases/git/develop/util/musc/scr/musc_setup.sh -h
$HOME/harmonie_releases/git/develop/util/musc/scr/musc_setup.sh -r $HOME/harmonie_releases/git/develop -c METIE.LinuxRH7gnu
}}}

 3. Compile and run your experiment (still in $HOME/hm_musc/test_0001)
{{{
cd $HOME/hm_musc/test_0001
./musc_compile.sh -h
./musc_compile.sh -n 2   # n is the number of parallel make processes
                         # -- pick a sensible number for your laptop/PC/HPC
}}}

 4. Get a copy of the input files
{{{
cd $HOME
wget https://hirlam.org/trac/raw-attachment/wiki/HarmonieSystemDocumentation/MUSC/muscCY43InputData.tar.gz
gunzip muscCY43InputData.tar.gz
tar -xvf muscCY43InputData.tar
}}}

== Run MUSC ==
=== musc_ref ===
The reference test is s a 6-hr experiment (change NSTOP in musc_run.sh if you wish to change this) and there with output produced each 60 seconds of the time period. 

 1. Run your experiment
{{{
cd $HOME/hm_musc/test_0001
./musc_run.sh -h
./musc_run.sh -t musc_ref -d $HOME/muscCY43InputData/musc_ref -n REFL65 -l 6 [ -N ] [ -e ECOCLIMAP_PATH ]
#for a 6hr expt; if you include -N nudging is on; optional path for ECOCLIMAP data may be given.

}}}

!!!!!!!!!!!!!!!!!!!!!! ARMU and GABLS3 cases need further editing based on latest changes
=== ARMCU ===
This is an idealized SCM test case, the "Sixth GCSS WG-1 case (ARM—Atmospheric Radiation Measurement)", focussing on the diurnal cycle of cumulus clouds over land ([https://doi.org/https://doi.org/10.1256/003590002320373210, Brown et al, 2002], [https://doi.org/10.1256/qj.03.122, Lenderink et al, 2004]. The input files and namelist settings have been taken from mitraillette (''arut'').

 1. Run your experiment
{{{
cd $HOME/hm_musc/test_0001
./musc_run.sh -h
./musc_run.sh -t armcu -d $HOME/muscCY43InputData/armcu -n ARMCUL79
}}}

=== GABLS3 ===
This is an idealized SCM test case defined as part of the "GABLS 3rd Case for Single Column Model intercomparison and evaluation" ([http://projects.knmi.nl/gabls/index.html GABLS3]). '''WARNING:''' This does not work yet! Made available in the hope that someone else will fix it!
 1. Run your experiment
{{{
cd $HOME/hm_musc/test_0001
./musc_run.sh -h
./musc_run.sh -t gabls3 -d $HOME/muscCY43InputData/musc_gabls3 -n GABLS3L41
}}}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

== MUSC Output ==

== Plot output time-series from the MUSC output lfa files ==
{{{
cd $HOME/hm_musc/test_0001
./musc_plot1Dts.sh -d <musc-data-dir>
##
## python based plotting scripts and "default" png plots 
## will be produced in $HOME/hm_musc/test_0001/plots1Dts
##
}}}

== Extract output from the MUSC output ICM* fa files and plot time-series using these ==
{{{
cd $HOME/hm_musc/test_0001
./musc_convertICM2ascii.sh -l <number_hours_in_expt_run> -f <path_to_your_musc_output>

## Generates an OUT ascii file for each atm and sfx ICM* input file
## ICM files have additional input not in lfa files eg TKE which is useful - also similar to 3D outputs
## Note that we use hm_levs for the height levels - not accurate as should be calculated for each profile !!! To be done

./musc_plot_profiles_ICMfiles.sh -d <data-dir> -p <parameter-model-level> -l <run_length_hours>

}}}


== Creating your own input files ==

A converter script, musc_convert.sh, is available to extract a MUSC column from a model state file (ICMSHHARM+HHHH). musc_convert.sh is a Bash script that calls gl_grib_api to carry the data conversions.

=== Extract a MUSC input file ===
{{{
cd $HOME/hm_musc/test_0001
./musc_convert.sh -d $HOME/muscCY43InputData/harm_arome/ -c extr3d -n REFIRL -l 53.5,-7.5 -t 6
mkdir $HOME/muscCY43InputData/musc_refirl
cp MUSCIN_REFIRL_atm.fa MUSCIN_REFIRL_sfx.fa MUSCIN_REFIRL_pgd.fa $HOME/muscCY43InputData/musc_refirl/
}}}

=== Convert MUSC FA to MUSC ASCII ===
{{{
cd $HOME/hm_musc/test_0001
./musc_convert.sh -c fa2ascii -d $HOME/muscCY43InputData/musc_refirl -n REFIRL
ls -ltr
cp MUSCIN_REFIRL_atm.ascii MUSCIN_REFIRL_sfx.ascii $HOME/muscCY43InputData/musc_refirl/
}}}

=== Convert MUSC ASCII to MUSC FA ===
{{{
cd $HOME/hm_musc/test_0001
./musc_convert.sh -c ascii2fa -d $HOME/muscCY43InputData/musc_refirl -n REFIRL
ls -ltr
}}}


=== Forcing in MUSC  ===

 *  musc_convert.sh includes forcing for temperature (11), humidity (51) and wind speed (32) . 

You may edit the following lines to include other forcing:
{{{
  PPPKEY(1:4)%shortname  = 'ws','#','#','#',
  PPPKEY(1:4)%faname  = '#','SNNNFORC001','SNNNFORC002','SNNNFORC003'
  PPPKEY(1:4)%levtype = 'hybrid','hybrid','hybrid','hybrid',
  PPPKEY(1:4)%level   = -1,-1,-1,-1,
  PPPKEY(1:4)%pid     = 32,-1,-1,-1,
  PPPKEY(1:4)%nnn     = 0,0,0,0,
  PPPKEY(1:4)%lwrite  = F,T,T,T,
  IFORCE              = 11,51,32,
}}}

 * Further information on forcing is available here: [wiki:HarmonieSystemDocumentation/MUSC/Forcing MUSC/Forcing]


== MUSC Virtual Machine (VM) ==

MUSC can also be run in a Virtual Machine. This removes the need for compilation and installation of the model as it is already installed and running in the VM. The GUI in the VM can be a little slow depending upon your specific computer, however, the terminals are generally very quick, so working primarily in terminals removes this problem. 

 1. Get the VM (~7 Gb):  [https://hirlam.org/portal/download/MUSC/musc_cy43_vm_v1.0.tar.bz2]

2. Create a new directory (e.g. ~/VirtualBox_VMs/) and decompress the file in it.
    '''WARNING: The MUSC VM decompresses to be approximately 43 Gb.''' [[br]]
    Decompressing the file can usually be done by moving the file to your new directory and double clicking it in your file manager. [[br]]
    This will create a directory called MUSC containing the MUSC VM. [[br]]
    This can also be done in a linux terminal as follows: 
{{{
mkdir ~/VirtualBox_VMs
mv Directory_With_Dowloaded_File/musc_cy43_vm_v1.0.tar.bz2 ~/VirtualBox_VMs
cd ~/VirtualBox_VMs
tar xjf musc_cy43_vm_v1.0.tar.bz2
}}}

3. Download and install virtual machine software:
    The MUSC VM is in !VirtualBox format (*.vbox) and can be used with various virtual machine software but the simplest choice is to use !VirtualBox from Oracle. [[br]]
    This is available under the GNU Public Licence (GPL) for Windows, Mac, and Linux. [[br]]
    Download and install the !VirtualBox software from:  [https://www.virtualbox.org/wiki/Downloads]

4. Setup the MUSC VM:
{{{
Open VirtualBox
In the menu "Machine", select "Add…"
Navigate to the decompressed directory (e.g. ~/VirtualBox_VMs/MUSC)    
Select the file "MUSC.vbox"
Click "Open"
}}}

5. Starting the MUSC VM:
    Double click on MUSC in the left panel of the !VirtualBox window.

The VM should open a new window in which an Ubuntu system is booted. There is no password required to log in, though if it is needed, the username and password are both “musc”. 
There is an overview document on the desktop detailing the directory structure and how to setup and run your first experiment. 



