[[PageOutline]]

[[Center(begin)]]
= '''Arome RAPS benchmark''' =
[[Center(end)]]

== Background ==

At the beginning of 2010, three institutes ( AEMET, FMI/CSC, met.no ) were in processes of preparing separate benchmark packages of an AROME code for their respective HPC procurements. Gradually, in the related communications, it became evident that the great variety of the AROME code versions under preparations (cycle36, cycle37) would make vendors' work very challenging and unproductive. Therefore it was seen that it could be a win-win move for all concerned parties if all the three institutes would join their efforts and put together a common benchmark package. By that way not only duplicated (triplicated) work would be avoided but also the benchmarkers on verdors' side would be able to concentrate their efforts on a single source code base for better productivity and enhanced feedback to the AROME community. Moreover, it was anticipated that this common benchmark package might be found useful also in the other Harmonie institutes.         

== Getting the package ==

The package and associated input data is available in the download area of hirlam.org. [https://hirlam.org/portal/download/benchmark]

== Organization of the package ==

This benchmark package is based on the Meteo-France RAPS benchmark code, which in turn is a derivative of the cycle 36T1 source base. But on top of that, this version has a much improved SURFEX behaviour, an order of magnitude shorter startup time, and working OpenMP implementation. Thus it hints at what will become included (at least for SURFEX) in cycle 37. The code has not been meteorologically validated but it is fine for benchmarking purposes. On top of the RAPS code the following HARMONIE developments have been introduced: 

 * makeup            - configure/make style software installation tool
 * I/O optimizations - SAMIO to offload part of the I/O from computation, collective MPI communications to improve I/O performance   


== Input files ==

Please note that it is crucial to have right namelist settings to enable reproducibility. A set of input files including feasible namelists for different problem sizes is provided to ease up the startup for testing. The problem sizes are sorted according to the international clothing sizes as follows:     

{{{
S   - Toy.50x50xL60.6h
M   - Norway.216x300xL60.6h
L   - Finland.300x600xL60.6h
XL  - Iberia.1152x864xL60.6h
XXL - Skandinavia.1600x1600xL60.6h
}}}

== Log of features(F), issues(I) and bugfixes(B) ==


(F1) You have to have the right namelist settings to enable reproducibility. Check the sample input for feasible settings. 

(F2) Because of the threadprivate directives in modules, not in common blocks nor in subroutines at least some compilers (pathscale) erroneously ignore OpenMP enabled compilation of the routines using this kind of modules. On IBM (c1a), the xlf wrapper cannot be used as is. Gfortran 4.4.3 is not affected by this.


(B1) Module names exceeding the maximum length (31 characters) specified in the Fortran 95 standard have been corrected. 

(F3) On Lustre filesystem it was found that ELS & SURFX files (at least) need to have protections chmod u+rw when running with gfortran based executable. 

(F4) On most systems, if not on all, savings in memory/MPI-resources can be obtained by setting:
{{{     
M_BARRINC_DIWRGRID=1
L_GATHERV_WRGP=.TRUE.
}}}
(B2/I1) Bugfix to remove the use of uninitialized values, also enabling reproducibility, meteorological feasibility now confirmed by Meteo France.

(F4) There is strong evidence that a mixed mode MPI/OpenMP execution is thread-safe and gives bit-identical result against pure MPI execution. This has been the case on IBM with the xlf compiler and on Linux PC's with the gfortran compiler. The same was achieved on Cray XT system using the gfortran compiler together with external (netlib.org) LAPACK and BLAS libraries (Cray's own LIBSCI implementation seems to be non-reproducible with more than 1 OpenMP thread per MPI-task).

(I2) An exception to the bit-identical reproducibility. The variable SURFXCHAL, when enabled, seems not to be bit-identical between runs although all the other results are bit-identical. This is under investigation.

[[Center(begin)]]
[wiki:HarmonieSystemDocumentation Back to the main page of the HARMONIE System Documentation]
[[Center(end)]]