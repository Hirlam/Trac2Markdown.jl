[[PageOutline]]
[[Center(begin)]]
= '''Phasing information''' =
[[Center(end)]]

== Introduction ==

In the following we describe the procedure to interface the HIRLAM subversion repository to the !ClearCase repository at Meteo France. Further on, the tasks of the phasers and procedure to create a new branch is described.


== !ClearCase -> Subversion merging ==

The first thing to do is to fetch the latest branch from !ClearCase. In here we assume you have the access rights and the knowledge to connect to the right computers (currently, !ClearCase is accessed from 'merou').

0) If you haven't been working with !ClearCase yet, perform the following:

   - Read [http://www.cnrm.meteo.fr/gmapdoc/meshtml/ccase/CC-manual.html] on how to set up your
     .bash_profile

   - Then issue the following command:
{{{
cc_init -p arp
}}}
1) Check what is available

{{{
cc_versions
}}}
2) Get a view of the the new version
{{{
cc_getpack -r CY35T2 -b bf -v 01 -u bf_01_hirlam
}}}
3) Extract the relevant directories into tar-file
{{{
tar jcvf ~/CY35T2_bf.01.tbz2 --exclude=lost+found \
   aeo ald arp bip bla mpa mse odb sat sur surfex tal tfl uti xla xrd
}}}
4) Exit
{{{
. cc_quit
}}}

Transfer the tarfile to your preferred platform (e.g., using ftp ecaccess.ecmwf.int -
don't forget to 'cd ECSCRATCH' as quota limitations won't allow you to store the tar
file in your home directory at ecgate).

=== Merge into vendor branch ===

To import source code from an external vendor we use the script auto_svn_load_dirs.pl in contrib/util.

Unpack your tar file in a directory with a proper name, e.g. CY35T2_bf.01. Check out vendor/aladin/current as current-wc in a parallel directory:
{{{
svn co https://svn.hirlam.org/vendor/aladin/current current-wc
}}}
Now we are ready to start the merge:
{{{
auto_svn_load_dirs.pl -v -wc current-wc \
     https://svn.hirlam.org/vendor/aladin current CY35T2_bf.01
}}}
This will present you with a list of all the files that seem to have been moved.
You then get a chance to have the script "Guess" what the corrective action should be.
You can accept or reject that choice for every file separately.

When all files have been processed, choose "Finish" to have the script complete the update
to vendor/aladin/current and commit the changes.

Subsequently, tag the new vendor/aladin/current:
{{{
svn copy -m "Tag vendor/aladin/current as vendor/aladin/cy35t2_bf.01." \
   https://svn.hirlam.org/vendor/aladin/current \
   https://svn.hirlam.org/vendor/aladin/cy35t2_bf.01
}}}

=== Merge the new vendor copy into the trunk ===

Create a fresh working copy of the trunk:
{{{
svn co https://svn.hirlam.org/trunk/harmonie working-copy
}}}
Perform the merge of the new source code. Note that <previous-tag> below should be the version used last time there was a merge from the vendor branch to the trunk. 
If you pick the wrong version you could miss changes. Postpone every conflict by choosing 'p':

{{{
svn merge https://svn.hirlam.org/vendor/aladin/<previous-tag> \
   https://svn.hirlam.org/vendor/aladin/current working-copy/src
}}}

Subsequently, cd to directory 'working-copy' and resolve the conflicts by using the script
svn_resolve.pl in contrib/util.
The script gives you the option to view various differences, edit the working copy and
indicate to svn that the conflict has been resolved.

'''In the end, the correct source has to end up in the file with the name of the original source.'''
That name, with the extension '.working' means what's in the working-copy directory, with '.merge-left' means what's
in the old vendor branch and with '.merge-right' what's in the new vendor branch.

After all conflicts have been resolved (sometimes it might be expedient to simply take the
the updated file from the vendor branch and have researchers resolve conflicts afterwards),
the final commit is in order (also from directory 'working-copy').
{{{
svn commit
}}}

== Subversion -> !ClearCase: Create a "contributions-from-hirlam" branch to merge back into !ClearCase ==

Every Cycle there is the opportunity to add contributions or bug fixes from the HIRLAM consortium to IFS.

This is done by creating a !ClearCase branch off the latest bug fix release of that Cycle.

Subsequently we pass the name of the !ClearCase branch to Meteo France staff.

=== Collect the changes in the Cycle ''nm''T''i'' trunk ===

Collect all files in the Cycle ''nm''T''i'' trunk of the HARMONIE repository that contain relevant
changes in a tar file:
{{{
cd trunk/harmonie/src
tar zcvf ~/CYnmTi_bf.0j_contrib_hirlam.tgz arp/phys_dmn/....
}}}
Transfer the tar-file to 'merou' (!ClearCase host) at Meteo France.

=== Add the collection of changes to a "contributions-from-hirlam" !ClearCase branch ===

Unpack the tar file in a temporary directory outside the !ClearCase directories in your $HOME:
{{{
mkdir ~/tmp
cd ~/tmp
tar zxvf ~/CYnmTi_bf.0j_contrib_hirlam.tgz
}}}
Create a branch to contain our contributions
{{{
cc_getpack -r CYnmTi -b main [-v 0n] -u cynmtibf0j_contrib_hirlam
}}}
This will create a branch with name
{{{
arp_<your-username>_CY37Ti_cynmtibf0j_contrib_hirlam
}}}
Now you can use cc_edit to edit the files that are changed in the HIRLAM contribution:
{{{
export EDITOR=<your-favorite-editor>
cc_edit -f <path_to_file_in_branch>
}}}
Read in the file from our contribution (over the file in the editor buffer, or in a separate buffer when using emacs - this allows you to use ''edit-buffers'' and apply differences selectively).

Save and quit when ready, repeat for all files to be changed. Files are committed to the branch when saved.

Exit !ClearCase:
{{{
. cc_quit
}}}

[[BR]]

An alternative method is to use either cc_populdir or cc_popvob.
''To Be Described.''

=== Merge of the "contributions-from-hirlam" branch into an official one ===

Make a list of the files in the "contributions-from-hirlam" branch:
{{{
cc_getview -r CYnmTi -b main -u cynmtibf0j_contrib_hirlam
cc_list > ~/tmp/list-file.txt
}}}
Create a view of the official branch:
{{{
cc_getpack -r 37 -b t1 -v 01 -u <username>
}}}
Then perform:
{{{
cc_merge -r 37 -b hirlam -u <username> -d all
}}}
and - in case it is necessary - for a new directory:
{{{
cc_merge -r 37 -b hirlam -u <username> -d ald/module
}}}
Then merge the files themselves:
{{{
cc_merge -r 37 -b hirlam -u <username> -l ~/tmp/list-file.txt -D
}}}
This will present you with a list of the necessary actions for each file to be merged.  Most will be "automatic", which means that they will go in without further (human) action.

For the others, a set of four windows will pop up: The output of the merge with conflicts indicated on top and in the lower half three windows for

* The source on the main branch
* The new file to be added
* The file as it is on the official branch

The majority of the files will have no real conflicts - you can just accept the default action.

For the rest, some handiwork is necessary.

=== Update !ClearCase ===

There are two help scripts under merou:/home/mrpm624/

cc_patch_commit

cc_patch_checkout

[[BR]]

To put things into clearcase
{{{
cc_getview
cc_export -b -c -h tori -p master
}}}

The changes should be described in a similar way as in:

TODO: supply link

== Getting namelists used at Meteo-France ==

Log in to yuki (or tori). Then run the command '''genv''' (you may have to add /mf/dp/marp/marp001/public/bin to your PATH if you don't have it already):
{{{
mrpe726@yuki:~> genv
usage (1) : genv suite-model:YYYY/MM/DD[-RXX]

            suite = oper dble test
            model = arpege aladin tropique mocage restart peace reunion alacep arome varpack tsr aria algerie qatar libye testmp1 testmp2

usage (2) : genv suite-model

            suite = oper dble test
            model = arpege aladin tropique mocage restart peace reunion alacep arome varpack tsr aria algerie qatar libye testmp1 testmp2

	    NB: same as (1) - today's date is automatically added

usage (3) : genv cycle-id
       ex : genv cy33t0_op1.23
}}}
Note that there are no namelists for ALARO. Anyway, to get e.g. the current AROME namelists:
{{{
mrpe726@yuki:~> genv oper-arome | grep NAMELIST
NAMELIST_ALADIN="al35t2_arome-op1.16.nam"
NAMELIST_AROME="al35t2_arome-op1.16.nam"
NAMELIST_UTILITIES="ut35t2_arome-op1.04.nam"
}}}
To actually get the namelists, run the command '''gget'''
{{{
mrpe726@yuki:~> gget al35t2_arome-op1.16.nam
}}}
You get a lot of namelists in a directory named $NAMELIST_AROME
{{{
mrpe726@yuki:~> cd al35t2_arome-op1.16.nam/
mrpe726@yuki:~/al35t2_arome-op1.16.nam> ls
diff.al35t2_arome-op1.15.nam  namel_ee927_surf.franxl    namel_lamflag_odb.midpyr  namel_sude_off_fp0
list.al35t2_arome-op1.16.nam  namel_ee927_surf.midpyr    namel_lamflag_odb.nore    namel_surfex_output
namel_bret_off_fp             namel_ee927_surf.nore      namel_lamflag_odb.pari    README
namel_bret_off_fp0            namel_ee927_surf.pari      namel_lamflag_odb.sude    select_bret_off_fp
namel_cplsurf_def             namel_ee927_surf.sude      namel_midpyr_off_fp       select_bret_off_fp0
namel_ee927_bret_cpl          namel_fpos_bret_addsurf    namel_midpyr_off_fp0      select_fran_off_fp
namel_ee927_bret_cpl0         namel_fpos_fran_addsurf    namel_minim               select_fran_off_fp0
namel_ee927_fran_cpl          namel_fpos_franxl_addsurf  namel_nore_off_fp         select_franxl_fp
namel_ee927_fran_cpl0         namel_fpos_midpyr_addsurf  namel_nore_off_fp0        select_franxl_fp0
namel_ee927_franxl_cpl        namel_fpos_nore_addsurf    namel_pari_off_fp         select_franxl_off_fp
namel_ee927_franxl_cpl0       namel_fpos_pari_addsurf    namel_pari_off_fp0        select_franxl_off_fp0
namel_ee927_midpyr_cpl        namel_fpos_sude_addsurf    namel_previ_dyn_off       select_midpyr_off_fp
namel_ee927_midpyr_cpl0       namel_fran_off_fp          namel_previ_off           select_midpyr_off_fp0
namel_ee927_nore_cpl          namel_fran_off_fp0         namel_previ_surfex        select_nore_off_fp
namel_ee927_nore_cpl0         namel_franxl_off_fp        namel_progrele            select_nore_off_fp0
namel_ee927_pari_cpl          namel_franxl_off_fp0       namel_pseudotraj          select_pari_off_fp
namel_ee927_pari_cpl0         namel_franxl_previ         namel_rgb                 select_pari_off_fp0
namel_ee927_sude_cpl          namel_franxl_previ_dyn     namel_rgb_met8            select_sude_off_fp
namel_ee927_sude_cpl0         namel_lamflag_odb.bret     namel_rgb_met9            select_sude_off_fp0
namel_ee927_surf.bret         namel_lamflag_odb.fran     namel_screen
namel_ee927_surf.fran         namel_lamflag_odb.franxl   namel_sude_off_fp
}}}
== Preparations before phasing ==

Read the Meteo France webpage about phasing [http://www.cnrm.meteo.fr/aladin/spip.php?article63].

== HARMONIE phasing efforts ==

[wiki:Phasing/cy38t1 cy38t1]

[wiki:Phasing/cy39t1 cy39t1]

=== Testbed experiments ===

The Harmonie testbed is a tool to help you verify the technical functionality of the system. It runs through all meaningful configurations in an efficient manner. 
Read more [wiki:HarmonieSystemDocumentation/37h1.2/Evaluation/HarmonieTestbed here].

=== Update documentation ===

The final task at the end of the phasing is to tag the documentation with the current version number. The documentation has of course been updated continuously but might need a final review before tagging. Some scripts to make tagging easier is attached to this page. After tagging the new pages may be loaded to the wiki using the trac-admin tool on hirlam.org.

{{{
trac-admin /data/www/trac_hirlam_env/ wiki load MYDIR
}}}

where MYDIR is a directory containing the revised wiki pages. You must have TRAC_ADMIN permissions to be able to use the trac-admin tool.

[[Center(begin)]]
[wiki:HarmonieSystemDocumentation Back to the main page of the HARMONIE System Documentation]
[[Center(end)]]
----

[[Center(begin)]]
[[Disclaimer]]

[[Color(red, Last modified on)]] [[LastModified]]
[[Center(end)]]