[[PageOutline]]

[[Center(begin)]]
= Post processing with gl =
[[Center(end)]]

If you are working with the gribex version of gl check [wiki:HarmonieSystemDocumentation/38h1.2/PostPP/gl here].

== Introduction ==

gl ( as in '''g'''rib'''l'''ist ) is a multi purpose tool for file manipulation and conversion. It uses GRIB and BUFR libraries and can be compiled with and without support for HARMONIE FA/LFI or NETCDF files. The gl package also includes software for extraction for verification, fldextr, and field comparison, [wiki:HarmonieSystemDocumentation/38h1.2/PostPP/xtool xtool].

'''Please note''': Use of gl related binaries in all scripts have been replaced by gl_grib_api. From now on ALL gl development should be done in gl_grib_api only. gl using gribex will be kept in the cy38h1 series but will be removed in future cycles.[[br]]
'''Please note''': These instructions are valid for gl_grib_api version 38h1.2.beta.2

{{{
 
 USAGE: gl_grib_api file [-n namelist_file] [-o output_file] -[lfgmicpasdetq]
 
 gl_grib_api [-f] file, list the content of a file, -f for FA/lfi files  
 -c    : Convert a FA/lfi file to grib ( -f implicit )          
 -p    : Convert a FA file to grib output without extension zone
         (-c and -f implicit )                                  
 -musc : Convert a SCUM FA file ASCII ( -c implicit )           
 -a    : Convert a HIRLAM file to ALADIN input                  
         climate_aladin assumed available                       
 -d    : Together with -a it gives a (bogus) NH boundary file   
 -e    : Convert a ECMWF file to ALADIN input                   
         climate_aladin assumed available                       
 -s    : Work as silent as possible                             
 -g    : Prints ksec/cadre/lfi info                             
 -m    : Prints min,mean,max of the fields                      
 -i    : Prints the namelist options (useless)
 -tp   : Prints the GRIB parameter usage                         
 -t    : Prints the FA/lfi/GRIB table (useful)                  
 -q    : Cross check the FA/lfi/GRIB table (try)                
 -pl X : Give polster_projlat in degrees                         
 
 gl file -n namelist_file : interpolates file according to      
                            namelist_file                       
 gl -n namelist_file : creates an empty domain according to     
                       specifications in namelist_file          
 -igd  : Set lignore_duplicates=F                               
 
}}}

== grib_api definition tables ==

With the change to grib_api we heavily rely on the shortnames. To get the correct connection between the shortnames and the GRIB1/GRIB2 identifiers we have defined tables for harmonie. These tables can be found in [source:branches/gl_grib_api/definitions here]. To use these tables you have to define the {{{GRIB_DEFINITION_PATH}}} environment variable as 

{{{
export GRIB_DEFINITION_PATH=SOME_PATH/gl_grib_api/definitions:PATH_TO_YOUR_GRIB_API_INSTALLATION
}}}


== GRIB/FA/LFI file listing ==

Listing of GRIB/ASIMOF/FA/LFI files.
{{{
 gl_grib_api [-l] [-f] [-m] [-g] FILE
}}}
where FILE is in GRIB/ASIMOF/FA/LFI format

||-l || input format is LFI      ||
||-f || input format is FA       ||
||   || -l and -f are equivalent ||
||-g || print GRIB/FA/LFI header ||
||-m ||print min/mean/max values ||

== GRIB/FA/LFI file conversion ==

{{{
gl_grib_api [-c] [-p] FILE [ -o OUTPUT_FILE ] [ -n NAMELIST_FILE ]
}}}

where 
||-c ||converts the full field (including extension zone) from FA to GRIB ||
||-p ||converts field excluding the extension zone ("p" as in physical domain) from FA to GRIB ||

The FA/LFI to GRIB mapping is done in a table defined by a [source:tags/harmonie-38h1.2/util/gl/inc/trans_tab.h translation table]

To view the table:
{{{
gl_grib_api -t
gl_grib_api -tp
}}} 
To check for duplicates in the table:
{{{
gl_grib_api -q
}}}

The translation can be changed through a namelist like this one:
 {{{
  &naminterp
    user_trans%full_name ='CLSTEMPERATURE',
    user_trans%tab       = 253,
    user_trans%par       = 123,
    user_trans%typ       = 105,
    user_trans%lev       = 002,
  /
 }}}

Conversion can be refined to convert a selection of fields. Below is and example the will write out 
 * T (ppp=011), u (ppp=033) andv (ppp=034) on all (lll=-1) model levels (ttt=109)
 * T (ppp=011) at 2m (lll=2) above the ground (ttt=105) [T2m]
 * Total precipitation (ppp=061,ttt=105,lll=000)
 {{{
  &naminterp
    readkey%ppp =011,033,034,011,061,228,
    readkey%lll =-01,-01,-01,  2,  0, 10,
    readkey%ttt =109,109,109,105,105,105,
    readkey%tri =  0,  0,  0,  0,  4,  2,
  /
 }}}
where 
 * ppp means parameter
 * lll means level
 * ttt means leveltype
 * tri means time range indicator 

The first three ones are well known to most users. The time range indicator is used in HARMONIE to distinguish between instantaneous and accumulated fields. Read more about the options [wiki:HarmonieSystemDocumentation/38h1.2/Forecast/Outputlist/38h1#TimeunitsWMOcodetable4 here] Note that for level type 109 setting lll=-1 means all. 

We can also pick variables using their FA/lfi name:
 {{{
  &naminterp
    readkey%name = 'SPECSURFGEOP','SNNNTEMPERATURE',
  /
 }}}

Where {{{SNNNTEMPERATURE}}} means that we picks all levels.

Fields can be excluded from the conversion by name

 {{{
  &naminterp
    exclkey%name = 'SNNNTEMPERATURE'
  /
 }}}

== postprocessing ==
gl can be used to produce postprocessed parameters possibly not available directly from the model. 
 * Postprocessed parameters are defined in [source:tags/harmonie-38h1.2/util/gl_grib_api/grb/postprocess.F90@ util/gl_grib_api/grb/postprocess.F90]. Some more popular parameters are listed:
   * Pseudo satellite pictures
   * Total precipitation and snow
   * Wind (gust) speed and direction
   * Cloud base, cloud top, cloud mask and significant cloud top

 For a comprehensive list please check the [wiki:HarmonieSystemDocumentation/38h1.2/Forecast/Outputlist/38h1#Variablespostprocessedbygl output information] for each cycle.


 * To produce "postprocessed" MSLP and accumulated total precipitation and visibility use the following namelist, nam_FApp:
{{{
&naminterp
 pppkey(1:3)%shortname='pres','tp','vis',
 pppkey(1:3)%levtype='heightAboveSea','heightAboveGround','heightAboveGround'
 pppkey(1:3)%level=  0, 0, 0,
 pppkey(1:3)%tri=  0, 4, 0,
 lwrite_pponly= .TRUE.,
/
}}}
{{{
gl_grib_api -p ICMSHHARM+0003 -o output_pp.grib -n nam_FApp
}}}
 * Note:
   * Set lwrite_pponly as true to only write the postprocessed fields to file
   * Set lwrite_pponly as false write all fields will be written to the file, input fields as well as the postprocessed fields.

== vertical interpolation ==

gl can be used to carry out vertical interpolation of parameters:
 * To interpolation temperature to 1.40m (level 140 in cm) use the following namelist, nam_hl:
{{{
&naminterp
 pppkey(1:1)%shortname='t',
 pppkey(1:1)%levtype='heightAboveGroundHighPrecision',
 pppkey(1:1)%level=  140,
 pppkey(1:1)%tri=  0,
 vint_z_order=1,
 lwrite_pponly= .TRUE.,
/
}}}
{{{
gl_grib_api -p ICMSHHARM+0003 -o output_hl.grib -n nam_hl
}}}
 * Note:
   * Vertical interpolation to z levels is controlled by VINT_Z_ORDER: 0 is nearest level, 1 is bilinear interpolation

 * To height interpolation (Levls 500, 850 and 925 in hPa, type=100) use the following namelist, nam_pl:
{{{
&naminterp
 pppkey(1:3)%shortname='t','t','t',
 pppkey(1:3)%levtype='isobaricInhPa','isobaricInhPa','isobaricInhPa',
 pppkey(1:3)%level=  500, 850, 925,
 pppkey(1:3)%tri=  0, 0, 0,
 vint_z_order=1,
 lwrite_pponly= .TRUE.,
/
}}}
{{{
gl_grib_api -p ICMSHHARM+0003 -o output_pl.grib -n nam_pl
}}}

== horizontal interpolation ==

 * Interpolation/resampling between different geometries such as regular lat lon, Lambert conformal, Polar steregraphic, rotated lat lon and rotated Mercator is possible with gl

 * The interpolation methods available are:
   * nearest grid-point (order=-2)
   * most representative grid-point (order=-1)
   * nearest grid-point (order=0)
   * bi-linear (order=1)
   * bi-quadratic (order=2, mask not respected)
   * bi-cubic (order=3, mask not respected)

 * Example of (an Irish) rotated lat lon domain, nam_FArotll:
 {{{
&naminterp
 outgeo%nlon=50,
 outgeo%nlat=50,
 outgeo%nlev=-1,
 outgeo%gridtype='rotated_ll',
 outgeo%west=-2.5,
 outgeo%south=-2.5,
 outgeo%dlon=0.1,
 outgeo%dlat=0.1,
 outgeo%polon=-6.7,
 outgeo%polat=-36.2,
 order= 1,
/
 }}}
where DLON/DLAT are in degrees.[[br]]
The HIRLAM [https://www.hirlam.org/nwptools/domain.html Domain Tool] may be of use for viewing rotated lat lon domains.
{{{
gl_grib_api -p ICMSHHARM+0003 -n nam_FArotll  -o output.grib
}}}
 * Example of a lambert domain
 {{{
&naminterp
  outgeo%nlon       =  50 ,
  outgeo%nlat       =  50,
  outgeo%nlev       =  -1,
  outgeo%gridtype   =  'lambert',
  outgeo%west       =  15.0
  outgeo%south      =  50.0
  outgeo%dlon       = 10000.
  outgeo%dlat       = 10000.
  outgeo%projlat    =  60.
  outgeo%projlat2   =  60.
  outgeo%projlon    =  15.
/
 }}}
where DLON/DLAT are in meters.[[br]]
The HIRLAM [https://www.hirlam.org/nwptools/domain.html Domain Tool] may be of use for viewing rotated lat lon domains.

   * Example polar stereographic projection
 {{{
&naminterp
  outgeo%nlon       =  50 ,
  outgeo%nlat       =  50,
  outgeo%nlev       =  -1,
  outgeo%gridtype   =  'polar_stereographic',
  outgeo%west       =  15.0
  outgeo%south      =  50.0
  outgeo%dlon       = 10000.
  outgeo%dlat       = 10000.
  outgeo%projlat    =  60.
  outgeo%projlon    =  15.
/
 }}}
where DLON/DLAT are in meters.[[br]]
Note: the GRIB1 standard assumes that the projection plane is at 60 degrees north whereas HARMONIE assumes it is at 90 degrees north.

 * Example rotated Mercator
 {{{
&naminterp
  outgeo%nlon       =  50 ,
  outgeo%nlat       =  50,
  outgeo%nlev       =  -1,
  outgeo%projection =  11,
  outgeo%west       =  15.0
  outgeo%south      =  50.0
  outgeo%dlon       = 10000.
  outgeo%dlat       = 10000.
  outgeo%projlat    =  60.
  outgeo%projlon    =  15.
/
 }}}
where DLON/DLAT are in meters[[br]]
Note: rotated Mercator is not supported in GRIB1.

 * Geographical points is a special case of projection 0 use namelist file, nam_FAgp:
 {{{
&naminterp
  outgeo%nlon=3 ,
  outgeo%nlat=1,
  outgeo%nlev=-1,
  outgeo%gridtype='regular_ll',
  outgeo%arakawa=  'a',
  order             =   0,
  readkey(1:3)%shortname='t','u','v',
  readkey(1:3)%levtype='heightAboveGround','heightAboveGround','heightAboveGround',
  readkey(1:3)%level=   2,  10, 10,
  readkey(1:3)%tri=  0, 0, 0,
  linterp_field     = f,
  gplat          = 57.375,57.35,57.60
  gplon          = 13.55,13.55,14.63
/
 }}}
The result will be written to a ASCII file with the name gpYYYYMMDDHHLLL.
{{{
gl_grib_api -p ICMSHHARM+0003 -n nam_FAgp 
cat gp20140702_1200+003
}}}

== extract a sub-domain ==
gl_grib_api can be used to "cut out" a sub-domain from an input file using the namelist namCUT:
{{{
&naminterp
istart = 150
jstart = 150
istop = 350
jstop = 350
/
}}}
Use this command:
{{{
gl_grib_api input.grib -n namCut -o cutout.grib
}}}

== musc file ==
* To convert a history FA file from MUSC to an ascii file simply run
 {{{
    gl -musc FAFILE
 }}}
Note: this does not work with gl_grib_api.

== fldextr and obsextr ==

 Read about the verification extraction programs [wiki:HarmonieSystemDocumentation/38h1.2/PostPP/Extract4verification here]

== create_forcing ==
'''create_forcing''' is based on the gl tool, but is a tool to read a list of input files like grib files without extension zone and convert this to a data set of forcing to be used for offline '''SURFEX'''
