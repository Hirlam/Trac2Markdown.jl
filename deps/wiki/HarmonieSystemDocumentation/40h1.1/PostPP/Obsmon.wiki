= OBSMON =

In 2014 a new version of the observational monitoring system entered trunk. The first official release containing obsmon was cy38h1.2

The tool consists of two components. First a fortran interface is run for all the active observations types (defined in scr/include.ass). This first step generates statistics from the ODB and store data in three SQLite tables (ECMA/CCMA/ECMA_SFC(CANARI)). In addition the SQLite tables are concenated in tables in the /ts directory at the end of the run. The second step is the visualization of the SQLite tables. This is done with a R-package called shiny which enables us to inter-actively monitor offline or via a server daemon (e.g. shiny.hirlam.org)


== How to turn on obsmon? ==

Obsmon is enabled by default in sms/config_exp.h vi OBSMONITOR=obstat

NB1! If you don't have any log-files from the monitoring experiment, you should disable plotlog from the OBSMONITOR= string in sms/config_exp.h
NB2! Make sure that the -DODBMONITOR pre-processor flag is active during compilation of util/monitor. This should only be an issue on untested platforms and is by default enabled on ECMWF.


== How to create statistics and SQLite tables offline/stand-alone: ==

If you are running a normal harmonie experiment with the OBSMONITOR=obstat active, the following step is not relevant.

Two new actions are implemented in the Harmonie script. Instead of start you can write obsmon and instead of prod you can write obsmonprod. This will use the correct definition file and only do post-processing. If you have your ODB files in another experiment you can add the variable OBSMON_EXP_ARCHIVE_ROOT to point to the archive directory in the experiment you are monitoring. This approach is used in the operational MetCoOp runs. If you set OBSMON_EXP=label the runs will be stored in $EXTRARCH/label/. This way you can use the same experiment to monitor all other experiments. The experiements do not need to belong to you as long as you have reading permissions to the experiment. 

{{{
1. as start:
${HM_REV}/config-sh/Harmonie obsmon DTG=YYYYMMDDHH DTGEND=YYYYMMDDHH OBSMON_EXP_ARCHIVE_ROOT=PATH-TO-ARCHIVE-DIRECTORY-TO-MONITOR OBSMON_EXP=MY-LABEL
}}}


{{{
2. as prod:
${HM_REV}/config-sh/Harmonie obsmonprod DTGEND=YYYYMMDDHH OBSMON_EXP_ARCHIVE_ROOT=PATH-TO-ARCHIVE-DIRECTORY-TO-MONITOR OBSMON_EXP=MY-LABEL
}}}

If you want to monitor an experiment stored on ECFS, you should specify OBSMON_EXP_ARCHIVE_ROOT with the full address (ectmp:/$USER/..... or ec:/$USER/...) e.g. 
{{{
OBSMON_EXP_ARCHIVE_ROOT=ectmp:/$USER/harmonie/MY-EXP OBSMON_EXP=MY-LABEL
}}}

You can also monitor other users experiments as long as you have read-access to the data.

== How to visualize the SQLite tables: ==


==== Local "installation": ====

Check out the framework using shiny (version 2):
{{{
svn co https://svn.hirlam.org/trunk/contrib/obsmon2
}}}

Install the necessary R packages (and the potentially needed dependencies). You need R >= 3.0.
{{{
# Enter the checked out shiny-interface
cd obsmon2
./install
}}}

Start obsmon:
{{{
# Point the environment variable to your tables
# Set path to SQLITE data bases (normally the */ts directory containing accumulated data)
export OBSMON_EXP1=experiment_name1
export DBDIR_ECMA=your-ecma-sqlite-table-possibly-the-full-period
export DBDIR_ECMA_SFC=your-ecma-sqlite-table-possibly-the-full-period
export DBDIR_CCMA=your-ecma-sqlite-table-possibly-the-full-period
export OBSMON_EXP2=experiment_name2
export DBDIR_ECMA2=your-ecma-sqlite-table-possibly-the-full-period
export DBDIR_ECMA2_SFC=your-ecma-sqlite-table-possibly-the-full-period
export DBDIR_CCMA2=your-ecma-sqlite-table-possibly-the-full-period


# Enter the checked out shiny-interface
cd obsmon2
# Start the interface
./obsmon
}}}

Note: If you don't start shiny from the ./obsmon script but from inside R, you should have the needed R-libraries either in you default R-path or inside the user libraries set by the environment variable R_LIBS_USER. In the scripts above this is installed in ~/R/libraries unless the variable is already set.


==== ECGB: ====

On ECGB the shiny interface is checked out and R has the necessary packages installed. However there is still no web-browser to be used for visualization.


== How to extend obsmon with new observation types ==

=== Step 1: Extract statistics from ODB ===

In the scripts you must enable monitoring of your observation type. Each observation type is monitored if active in:
{{{
msms/harmonie.tdf
}}}

The script which calls the obsmon binary, is:
{{{
scr/obsmon_stat
}}}
This script set the correct namelist based on how you define your observation below. 

After the information is extracted, the different SQLite bases are gathered into one big SQLite file in the script:
{{{
scr/obsmon_link_stat
}}}

The observation types which the above script is gathering is defined in obtypes in this script:
{{{
util/monitor/scr/monitor.inc
}}}

Then let us introduce the new observation in the obsmon binary. The source code is in 
{{{
harmonie/util/monitor
}}}

There are two modules controlling the extraction from ODB:
{{{
mod/module_obstypes.f90
mod/module_obsmon.F90
}}}

The first routine defines and initializes the observation type you want to monitor. The second calls the intialization defined in the first file. The important steps are to introduce namelist variables and a meaningful definition in the initialization of the observation type.

The real extraction from ODB is done in
{{{
cmastat/odb_extract.f90
}}}

At the moment there are two different SQL files used, one for conventional and one for satelites. E.g. radar is handled as TEMP/AIRCRAFT.

=== Step 2: Visualize the new observation in shiny ===

The obsmon2 shiny tool is found here https://svn.hirlam.org/trunk/contrib/obsmon2

The logics of which observation type to display is defined in:
{{{
obsmon_functions.R
}}}

In case of a new plot added, the plotting is defined in:
{{{
obsmon_plots.R
}}}