[[PageOutline]]
= '''ODB software''' =
== Get the software ==
To make best use of ODB information produced by your Harmonie experiment one should use ODB and ODB-API software developed by ECMWF. Below are instruction on how to obtain the software from ECMWF.
=== ODB-API ===
ODB-API software is open source and released under an Apache licence. In the future the ODB-API Confluence page [https://software.ecmwf.int/wiki/display/ODB/ODB-API https://software.ecmwf.int/wiki/display/ODB/ODB-API] will be open to the public and everybody will be allowed to download ODB-API source code from it and use it. Until then, ECMWF have said they are happy to give access to the page on case by case basis to interested member states/HIRLAM partners, so they have always access to the latest releases and release notes. Requesting access to ODB API from Data Services is not necessary.

An e-mail should be sent to your ECMWF User Support contact to request access to the ODB-API Confluence page stating that you are working at an HIRLAM NMS and are using ODB data with your Harmonie experiments. 

=== ODB ===
''ODB stands for Observational !DataBase. It is database software to store and retrieve large amounts of meteorological numerical data in an efficient manner while used from within IFS. ODB software mimics relational database queries through its ODB/SQL -compiler and accesses data currently via a Fortran90 library interface.'' The original documentation is available here: [http://www.ecmwf.int/research/ifsdocs/CY28r1/pdf_files/odb.pdf http://www.ecmwf.int/research/ifsdocs/CY28r1/pdf_files/odb.pdf]

ODB software is made available to member states under a stricter license and must be requested from Data Services at ECMWF. It might be best for your ECMWF Computer Representative to make this request on behalf of your institute. This request may take some time to be processed. The request (one per institute) can be made by e-mail to (data.services@ecmwf.int) with the following information:
{{{
Dear Data Services,

I would like to request a licence for the use of the following software packages:
 * ODB
 * OBSTAT

--- My organization
Name:
Registered Address:

--- Details of the person authorized to sign the licence on behalf of the organization
Name:
Title:
e-mail:
}}}
 * After some time your ''person authorized to sign the licence on behalf of the organization'' will receive a software license agreement to be signed and returned to ECMWF.
 * ....

== Building your ODB software ==
Both ODB and ODB-API use cmake [http://www.cmake.org http://www.cmake.org] to configure the makefiles used to compile the software. You may have to build your own (more up to date) copy of cmake depending on your PC operating system.

=== ODB ===
Instructions on how to build ODB:
 * Get ODB software once ECMWF have provided your institute with a software license
{{{
cd $HOME
mkdir odb_releases
cp Odb-1.0.0-Source.tar.gz odb_releases/
cd odb_releases
gunzip Odb-1.0.0-Source.tar.gz
tar -xvf Odb-1.0.0-Source.tar
cd Odb-1.0.0-Source
}}}
 * Now draft a configuration script, '''config.metie.sh''', that uses cmake. Here is my example sample script:
{{{
#!/bin/ksh
alias cmake='/usr/local/cmake-2.8.9/bin/cmake'
source_dir=$HOME/odb_releases/Odb-1.0.0-Source
build_type=Production
install_prefix=/opt/metlib/odb/`cat $source_dir/VERSION.cmake | awk '{print $2}' | sed 's/["]//g' | sed 's/[)]//g'`/gnu
echo "prefix=$install_prefix"

cmake $source_dir \
    -DCMAKE_BUILD_TYPE=$build_type \
    -DCMAKE_INSTALL_PREFIX=$install_prefix \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_C_COMPILER=gcc \
    -DCMAKE_C_FLAGS="-g -fPIC -DLINUX -DINTEGER_IS_INT" \
    -DCMAKE_C_FLAGS_DEBUG="-O0" \
    -DCMAKE_C_FLAGS_RELEASE="-O2 -DNDEBUG" \
    -DCMAKE_CXX_COMPILER=g++ \
    -DCMAKE_CXX_FLAGS="-g -fPIC" \
    -DCMAKE_CXX_FLAGS_DEBUG="-O0" \
    -DCMAKE_CXX_FLAGS_RELEASE="-O2 -DNDEBUG" \
    -DCMAKE_Fortran_COMPILER=gfortran \
    -DCMAKE_Fortran_FLAGS="-fconvert=big-endian -fdefault-real-8 -fPIC -DLINUX" \
    -DCMAKE_Fortran_FLAGS_DEBUG="-g -O0" \
    -DCMAKE_Fortran_FLAGS_RELEASE="-O2" \
    -DODB_API_TOOLS=OFF \
    -DNETCDF_PATH=/opt/metlib/netcdf/4.1.3/gnu $@
}}}
 * No let's compile! (You should be in $HOME/odb_releases/Odb-1.0.0-Source)
{{{
mkdir build
cd build
../config.metie.sh
make
make install  ## you may have to log in as root to carry out the final install
}}}

=== ODB-API ===
Instructions on how to build ODB-API:
 * Download the latest version of ODB-API from [https://software.ecmwf.int/wiki/display/ODB/Releases https://software.ecmwf.int/wiki/display/ODB/Releases]
{{{
cd $HOME
mkdir -p odb_releases
cp OdbAPI-0.9.32-Source.tar.gz odb_releases/
cd odb_releases/
gunzip OdbAPI-0.9.32-Source.tar.gz
tar -xvf OdbAPI-0.9.32-Source.tar
cd OdbAPI-0.9.32-Source
}}}
 * Now draft a configuration script, '''confi.metie.sh''', that uses cmake. Here is my example that I place in OdbAPI-0.9.32-Source
{{{
#!/bin/sh
# This is an Irish template of a script for building ODB API. See instructions in file INSTALL.
# Please edit values of the cmake options or delete them.

export ODB_ROOT=/opt/metlib/odb/1.0.0/gnu
. /opt/metlib/odb/1.0.0/gnu/bin/use_odb.sh

alias cmake='/usr/local/cmake-2.8.9/bin/cmake'
source_dir=$HOME/odb_releases/OdbAPI-0.9.32-Source
build_type=Production
install_prefix=/opt/metlib/odb_api/`cat $source_dir/VERSION.cmake | awk '{print $3}' | sed 's/["]//g' | sed 's/[)]//g'`/gnu

echo "INSTALL = $install_prefix"
echo "BUILD   = `basename $(pwd) | sed 's/\W[a-zA-Z0-9]*//'`"
echo "ODB_ROOT= $ODB_ROOT"
echo 

cmake $source_dir \
    -DCMAKE_BUILD_TYPE=$build_type \
    -DCMAKE_PREFIX_PATH=/usr/local/python-2.7.2 \
    -DCMAKE_C_COMPILER=gcc \
    -DCMAKE_CXX_COMPILER=g++ \
    -DCMAKE_Fortran_COMPILER=gfortran \
    -DLIBGFORTRAN_PATH=/usr/lib/gcc/x86_64-redhat-linux/4.4.7 \
    -DCMAKE_MODULE_PATH=$source_dir/ecbuild/cmake \
    -DCMAKE_INSTALL_PREFIX=$install_prefix \
    -DODB_PATH=/opt/metlib/odb/1.0.0/gnu \
    -DECLIB_SOURCE=$source_dir/eclib \
    -DBUILD_SHARED_LIBS=ON \
    -DODB_API_MIGRATOR=ON \
    -DODB_API_FORTRAN=ON \
    -DODB_API_PYTHON=OFF \
    -DBISON_EXECUTABLE=/usr/bin/bison \
    -DSWIG_EXECUTABLE=/usr/bin/swig
}}}
 * Now let's compile! (You should be in $HOME/odb_releases/OdbAPI-0.9.32-Source)
{{{
mkdir build
cd build
../config.metie.sh
make
make install  ## you may have to log in as root to carry out the final install
}}}

== Convert ODB-1 to ODB-2 ==
Details on how to convert your ODB-1 (Harmonie experiment) databases to ODB-2 are described here.
....

----

= '''Stand-alone ODB (defunct)''' =
== ''' Build (Harmonie based) ODB''' ==
 * Set up a new Harmonie experiment
{{{
cd $HOME
mkdir -p hm_home/tag37h1p2
cd hm_home/tag37h1p2
Harmonie setup
Harmonie co util/makeup/defaults.mk
Harmonie Install
}}}
 
 * Edit util/makeup/defaults.mk and add the compilation of some extra ODB executables:
{{{
ewhelan@eddy:tag37h1p2> diff util/makeup/defaults.mk ~/harmonie_releases/tags/harmonie-37h1.2/util/makeup/defaults.mk 
35c35
< ODB_EXES=$(LIBDISK)/ODBTOOLS $(LIBDISK)/BATOR $(LIBDISK)/MANDALAY $(LIBDISK)/FODBSQL $(LIBDISK)/ODB2BUFR $(LIBDISK)/ODB2GRADS $(LIBDISK)/BUFR2ODB $(LIBDISK)/ODB2NETCDF $(LIBDISK)/ODBGNUPLOT $(LIBDISK)/PLOTOBS $(LIBDISK)/SIMULOBS2ODB $(LIBDISK)/ODBLESS $(LIBDISK)/ODBDIFF $(LIBDISK)/VIEWER $(LIBDISK)/FSCHEDULER
---
> ODB_EXES=$(LIBDISK)/ODBTOOLS $(LIBDISK)/BATOR $(LIBDISK)/MANDALAY
37c37
< ODB_C_EXES=$(LIBDISK)/ioassign $(LIBDISK)/dcagen $(LIBDISK)/odbfiletime $(LIBDISK)/odbmd5sum $(LIBDISK)/odb_version $(LIBDISK)/dd2ddl $(LIBDISK)/odb2rgg $(LIBDISK)/mysort
---
> ODB_C_EXES=$(LIBDISK)/ioassign
ewhelan@eddy:tag37h1p2> 
}}}

 * Now ''create'' your stand-alone ODB in $PATH2ODB=/opt/metlib/odb/CY37R0.000/gnu, for my PC, using the libraries and executables compiled by ''makeup''. ''makeup'' compiles Harmonie in '''$MAKEUP_BUILD_DIR/src''' set in config-sh/config.yourplatform or (by default in '''$ROOTDIR/$HARMONIE_CONFIG/src'''. So on your Linux PC typically $MAKEUP_BUILD_DIR/src=$HOME/scratch/hm_home/${EXP}/lib/src or $ROOTDIR/$HARMONIE_CONFIG/src=$HOME/scratch/hm_home/${EXP}/lib/$HARMONIE_CONFIG/src. For the example outlined below I have set '''MAKEUP_BUILD_DIR''' = '''$HM_LIB''' = '''$HOME/scratch/hm_home/${EXP}/lib'''.
{{{
mkdir -p $PATH2ODB
mkdir -p $PATH2ODB/lib
cp $HOME/scratch/hm_home/tag37h1p2/lib/libmpi_serial.a $HOME/scratch/hm_home/tag37h1p2/lib/libodb*.a $PATH2ODB/lib/
mkdir -p $PATH2ODB/include
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb/include/* include/
mkdir -p $PATH2ODB/module
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb/module/* module/
mkdir -p $PATH2ODB/bin
cd $PATH2ODB/bin
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/ODBGNUPLOT odbgnuplot.x
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/ODB2BUFR odb2bufr.x
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/ODB2GRADS odb2grads.x
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/ODB2NETCDF odb2netcdf.x
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb_version . 
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odbfiletime odbfiletime.x 
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odbmd5sum odbmd5sum.x 
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/FODBSQL odbsql.x
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb98.x .
#
# and the scripts
#
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb/scripts/create_ioassign .
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb/scripts/dcagen .
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb/scripts/odbup .
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb/scripts/odbprune .
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb/scripts/create_odbglue .
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb/scripts/create_static_stubb .
mkdir -p $PATH2ODB/sysdb/DUMMY
#
# and the DUMMY files ...
#
cp $HOME/scratch/hm_home/tag37h1p2/lib/src/odb/DUMMY.* $PATH2ODB/sysdb/DUMMY/
}}}

 * Some script changes ...
{{{
diff -r /opt/metlib/odb/CY37R0.000/gnu/bin/ /home/ewhelan/scratch/hm_home/tag37h1p2/lib/src/odb/scripts/ | grep -v Only
diff -r /opt/metlib/odb/CY37R0.000/gnu/bin/dcagen /home/ewhelan/scratch/hm_home/tag37h1p2/lib/src/odb/scripts/dcagen
6d5
< #set -x
277,281d275
< #  tables=$(\cd $dbdir >/dev/null 2>&1; \
< #          (echo "$tables" | perl -pe 's/\s*(\w+)/0 $1\n/g;' ; \
< #           find [0-9]* -type f -follow 2>/dev/null | $xargs_r ls -C1s) | \
< #           perl -w $sizes | sort -nr +0 | awk '{print $NF}' | perl -pe 's/\n/ /g;')
< #
285c279
<            perl -w $sizes | sort -nr  | awk '{print $NF}' | perl -pe 's/\n/ /g;')
---
>            perl -w $sizes | sort -nr +0 | awk '{print $NF}' | perl -pe 's/\n/ /g;')
393,394c387
< #        egrep -v '^#' $dcafile_out | sort -n +0 +5 >> $dcafile_out.$$
<         egrep -v '^#' $dcafile_out | sort -n  >> $dcafile_out.$$
---
>         egrep -v '^#' $dcafile_out | sort -n +0 +5 >> $dcafile_out.$$
diff -r /opt/metlib/odb/CY37R0.000/gnu/bin/use_odb.sh /home/ewhelan/scratch/hm_home/tag37h1p2/lib/src/odb/scripts/use_odb.sh
14,19d13
< ##/opt/metlib/odb/CY37R0.001/gnu/bin
< export ARCH=linux
< export ODB_DIR=/opt/metlib/odb
< export ODB_VERSION=CY37R0.000
< export ODB_ROOT=$ODB_DIR/$ODB_VERSION/gnu
< set -x
195,196c189
< #  ODB_F90="pgf90 -mp -g -O1 -Ktrap=fp -DLINUX -byteswapio -fPIC -tp px"
<   ODB_F90="gfortran -g -O1 -DLINUX -fconvert=big-endian"
---
>   ODB_F90="pgf90 -mp -g -O1 -Ktrap=fp -DLINUX -byteswapio -fPIC -tp px"
}}}

== Environment variables ==
{{{
#%Module 1.0
#
#  Stand-alone odb module for use with 'environment-modules' package:
#  version : CY37R0.000
#  compiler: gcc/gfortran 4.4.6
#

# Define prefix so PATH and MANPATH can be updated.
prepend-path  PATH             /opt/metlib/odb/CY37R0.000/gnu/bin
prepend-path  INCLUDE          /opt/metlib/odb/CY37R0.000/gnu/include
prepend-path  LD_LIBRARY_PATH  /opt/metlib/odb/CY37R0.000/gnu/lib
setenv        ODB_SYSPATH      /opt/metlib/odb/CY37R0.000/gnu/sysdb
setenv        ODB_ARCH         linux
setenv        ODB_FEBINPATH    /opt/metlib/odb/CY37R0.000/gnu/bin
setenv        ODB_BEBINPATH    /opt/metlib/odb/CY37R0.000/gnu/bin
setenv        ODB_BINPATH      /opt/metlib/odb/CY37R0.000/gnu/bin
}}}
Then source the use_odb.sh script:
{{{
. /opt/metlib/odb/CY37R0.000/gnu/bin/use_odb.sh
}}}
== Test your installation ==
 * From Niko Sokka (FMI):
{{{
cd $HOME
cp /home/ewhelan/scratch/hm_home/tag37h1p2/archive_AROME_3DVAR/2008/10/01/00/odb_ccma.tar .
tar -xvf odb_ccma.tar
cd odb_ccma/CCMA/
dcagen
odbsql -q 'select * from desc' -p1
odbsql -q 'select * from timeslot_index' -p1
odbsql -q 'select * from body' -p1
}}}
 * From Anne Fouilloux (ECMWF):
{{{
cd $HOME
cp /home/ewhelan/scratch/hm_home/tag37h1p2/archive_AROME_3DVAR/2008/10/01/00/odbvar.tar .
tar -xvf odbvar.tar
odbsql -q 'select obsvalue,fg_depar from hdr,body where obstype = $synop and varno@body=$t2m' -i odbvar/ECMA.conv            # in K
odbsql -q 'select (obsvalue-273.15),fg_depar from hdr,body where obstype = $synop and varno@body=$t2m' -i odbvar/ECMA.conv   # in °C
}}}
 * From ECMWF ODB course: Sami Saarinen and Paul Burton (2007)
{{{
SELECT count(*), avg(obsvalue), stdev(fg_depar)
FROM hdr, body WHERE obstype = $synop && 
          varno = $t2m AND obsvalue IS NOT NULL;
// Observation count per (obstype,codetype)-pair :
SELECT obstype, codetype, count(*)
FROM hdr ;
SELECT varno, avg(fg_depar), CORR(fg_depar, an_depar)
FROM body WHERE fg_depar is NOT null ;
}}}
{{{
cd $HOME
cp /home/ewhelan/scratch/hm_home/tag37h1p2/archive_AROME_3DVAR/2008/10/01/00/odbvar.tar .
tar -xvf odbvar.tar
cd odbvar/ECMA.conv
odbsql -v test.odbsql -i odbvar/ECMA.conv
}}}